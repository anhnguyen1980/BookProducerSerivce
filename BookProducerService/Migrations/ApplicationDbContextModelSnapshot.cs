// <auto-generated />
using System;
using BookProducerService.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookProducerService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookProducer.Core.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("BookProducer.Core.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("book");
                });

            modelBuilder.Entity("BookProducer.Core.Entities.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("GenreId")
                        .IsUnique();

                    b.ToTable("bookgenre");
                });

            modelBuilder.Entity("BookProducer.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("BookProducer.Core.Entities.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint(4) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("status");
                });

            modelBuilder.Entity("BookProducer.Core.Entities.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2020, 7, 16, 18, 11, 21, 986, DateTimeKind.Local).AddTicks(8686));

                    b.Property<string>("Finish")
                        .HasColumnName("finish")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Requested")
                        .HasColumnName("requested")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint(4) unsigned");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("taskhistory");
                });

            modelBuilder.Entity("BookProducer.Core.Entities.Book", b =>
                {
                    b.HasOne("BookProducer.Core.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookProducer.Core.Entities.TaskHistory", "TaskHistory")
                        .WithOne("Book")
                        .HasForeignKey("BookProducer.Core.Entities.Book", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookProducer.Core.Entities.BookGenre", b =>
                {
                    b.HasOne("BookProducer.Core.Entities.Book", "Book")
                        .WithOne("BookGenre")
                        .HasForeignKey("BookProducer.Core.Entities.BookGenre", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookProducer.Core.Entities.Genre", "Genre")
                        .WithOne("BookGenre")
                        .HasForeignKey("BookProducer.Core.Entities.BookGenre", "GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookProducer.Core.Entities.TaskHistory", b =>
                {
                    b.HasOne("BookProducer.Core.Entities.Status", "Status")
                        .WithMany("TaskHistory")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
